{"version":3,"sources":["logo.svg","Segment.js","text.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Segment","props","displayImages","images","length","className","header","text","Carousel","map","num","i","Item","src","process","alt","Caption","designImages","Container","Row","Col","xs","md","Image","thumbnail","fluid","intro","href","simplyEnglish","hiraganaDriller","simon2","infantSchool","designs","thanks","headers","design","App","console","log","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a80ae121.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './App.css';\nimport Carousel from 'react-bootstrap/Carousel';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\n\n\n\nconst Segment = (props) => {\n  let displayImages = false;\n  try {\n    let lengthCheck = props.images.length;\n    if (lengthCheck) {displayImages = true;}\n  } catch {\n    \n  }\n  return (\n    \n    <div>\n      <div className=\"SegmentContainer\">\n        <div className=\"HeaderText\">{props.header}</div>\n        <div className=\"TextContainer\"><p>{props.text[0]}</p></div>\n        <div className=\"TextContainer\">{props.text[1]}</div>\n        <div className=\"TextContainer\">{props.text[2]}</div>\n        <div className=\"TextContainer\">{props.text[3]}</div>\n        <div className=\"TextContainer\">{props.text[4]}</div>\n        <div className=\"TextContainer\">{props.text[5]}</div>\n        <div className=\"TextContainer\">{props.text[6]}</div>\n        <div className=\"CarouselFlexBox\">\n        {\n          displayImages && \n          <Carousel className=\"CarouselContainer\">\n          {\n            props.images.map(((num, i) => {\n              return (\n              <Carousel.Item className=\"CarouselItem\">\n                <img\n                className=\"d-block w-100\"\n                src={process.env.PUBLIC_URL + \"/images/\" + num + \".PNG\"}\n                alt=\"First slide\"\n              />\n                <Carousel.Caption>\n                </Carousel.Caption>\n              </Carousel.Item>\n              )\n            }))\n          }\n          </Carousel>\n        }\n        {\n          props.designImages && \n          <Container>\n            <Row className=\"row\">\n              <Col xs={6} md={4}>\n                <Image className=\"DesignImage\"  src={process.env.PUBLIC_URL + \"/images/\" + props.designImages[0] + '.png'} thumbnail />\n              </Col>\n              <Col xs={6} md={4}>\n                <Image className=\"DesignImage\" src={process.env.PUBLIC_URL + \"/images/\" + props.designImages[1] + '.png'} thumbnail />\n              </Col>\n              <Col xs={6} md={4}>\n                <Image className=\"DesignImage\" src={process.env.PUBLIC_URL + \"/images/\" + props.designImages[2] + '.png'} thumbnail />\n              </Col>\n            </Row>\n            <Row className=\"row\">\n              <Col xs={6} md={4}>\n                <Image fluid className=\"DesignImage\" src={process.env.PUBLIC_URL + \"/images/\" + props.designImages[3] + '.png'} thumbnail />\n              </Col>\n              <Col xs={6} md={4}>\n                <Image className=\"DesignImage\" src={process.env.PUBLIC_URL + \"/images/\" + props.designImages[4] + '.png'} thumbnail />\n              </Col>\n              <Col xs={6} md={4}>\n                <Image className=\"DesignImageLong\" src={process.env.PUBLIC_URL + \"/images/\" + props.designImages[5] + '.png'} thumbnail />\n              </Col>\n            </Row>\n          </Container>\n        }\n          \n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Segment;","import React from 'react';\n\n\nconst text = {\n    intro: [\n        'Hello, my name is Richard Turner.',\n        'I am a self-taught full-stack developer.  This is a small portfolio demonstrating what I consider to be my most interesting projects.  I have experience with a number of technologies, including HTML, CSS, JavaScript, PHP, jQuery, VueJS, React, React-Native, Redux, WordPress, Sketch, C#, MySQL, MongoDB, Firebase, and more.',\n        'I love programming and making things, and I have strived to obtain a well-rounded grasp of the entire development process.  In particular, I hope to develop, design and create helpful things that people can use, especially in the fields of education and language.  I wish to improve my knowledge in the realms of UX and UI, and apply more advanced HCI principles in my further endeavours.',\n        'Sincerely, thank you taking the time to look at my things.  I really do appreciate every second.',\n        <div className=\"TextContainer\">You may also visit my github <a href=\"https://github.com/Travis-Turner\">here</a>.</div>,\n        'Please scroll down to continue.'\n    ],\n    simplyEnglish: [\n        \"I created this app for the company Simply English in Moscow Russia.  The userbase consists of English-speaking teachers adjusting to life in Moscow. As part of their duties, teachers need to travel to multiple schools around Moscow - a city which occupies a massive amount of real estate. The app consolidates several functions into one place.  Teachers are able to access contacts for emergencies, receive their schedule, and order office supplies. The app also allows teachers to easily route to their apartment and clients, with Yandex - the Russian equivilent of Google. Teachers may also check school calendars, and the app also includes an interactive guidebook to help adjust to life in Russia.  The app is reguarly used by around 50 users at any given time.\",\n        'The Simply English application is available for iPhone and Android and was developed with React-Native, the backend portal was developed with React and Firebase.',\n        'Happily, based upon the success of the first application, I am expected to develop a second iteraction at the conclusion of the 2020 school year.',\n        <div className=\"TextContainer\">You can see the app on the Google Play Store, here <a href=\"https://play.google.com/store/apps/details?id=com.SimplyEnglish.SimplyEnglish&hl=en\">here</a>.</div>,\n        <div className=\"TextContainer\">You can see the app on the Apple App Store, here <a href=\"https://apps.apple.com/us/app/simply-english/id1475056793\">here</a>.</div>,\n        'To log in, use the password, \"RichardTurnerTest!\".'\n\n\n\n    ],\n    hiraganaDriller: [\n        'This is the first app I created.  It is a simple flashcard app, designed to help learners memorize the Japanese hiragana.  I hand drew each character in Sketch, composed the sound effects with GarageBand and commissioned a native speaker to record audio for each character.  It was important for me to be able to integrate sound into this application, as well as audio and visual cues that made the experience gratifying and pleasant.',\n        'The Hiragana Driller application is available for iPhone and was developed with React-Native.',\n        <div className=\"TextContainer\">You can see the app on the Apple App Store, here <a href=\"https://apps.apple.com/us/app/hiragana-driller/id1345285438\">here</a>.</div>,\n\n    ],\n    simon2: [\n        'There is an online community for self-taught developers called FreeCodeCamp.  There are several educational programs available through this site  One of the final projects in the Front-End Developer track is to recreate the popular game \"Simon\".  I decided to go a different way with the project, incorporating more game modes and integrating music and sound, as well as a title sequence which I created.',\n        'This project was created with React.',\n        <div className=\"TextContainer\">You may play the game <a href=\"http://simon.travisturner.io/\">here</a>.</div>,\n    ], \n    infantSchool: [\n        'I am currently developing this iPhone/Android app for a private kintergarten in Moscow.  It is being built with React-Native.  This project will eventually feature a chat and media section, as well as interactive menus and calenders for parents, as well as many other features.  Also, this app was a chance for me to do some translation work as I translate the text into Russian.',\n        'The backend portal for administrators is being developed with React and Firebase.',\n        'The photo gallery below has several photos from different stages of the development process thus far, demonstrating the interactions the project has gone through in response to client feedback.'\n    ],\n    designs: ['Although graphic design has thus far not been a focus, I have tried my best to aquire some basic illustration skills.',\n            'The following graphics were created using Sketch:'],\n    thanks: ['Again, thanks for visiting my portfolio.', '- Richard Turner',\n    <div className=\"TextContainer\"><a href=\"mailto:richardturnerdeveloper@gmail.com\">richardturnerdeveloper@gmail.com</a></div>],\n    headers: [\n        'Introduction', 'Simply English', 'Hiragana Driller', 'Simon II', 'Infant School App', 'Designs', 'Thanks'\n    ],\n    images: {\n        simplyEnglish: ['05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16'],\n        hiraganaDriller: ['18', '19', '20', '21', '22', '23'],\n        infantSchool: ['36', '37', '03', '04', '38', '39', '1', '02'],\n        design: [ 'order2', 'order3', 'order4', 'sky', 'tree', 'order1',]\n    }\n}\n\n\nexport default text;\n\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nimport Navigation from './Navigation';\nimport Segment from './Segment';\nimport text from './text';\n\nfunction App() {\n  console.log(text.images.design)\n  return (\n    <div className=\"App\">\n      \n      <Segment \n        text={text.intro}\n        header={text.headers[0]}\n        href=\"/about\"\n      >\n      </Segment>\n      <Segment \n        text={text.simplyEnglish}\n        header={text.headers[1]}\n        images={text.images.simplyEnglish}\n        href=\"/simplyEnglish\"\n      >\n      </Segment>\n      <Segment \n        text={text.hiraganaDriller}\n        header={text.headers[2]}\n        images={text.images.hiraganaDriller}\n        id=\"hiraganaDriller\"\n       \n      >\n      </Segment>\n      <Segment \n        text={text.simon2}\n        header={text.headers[3]}\n        href=\"/simon2\"\n      >\n      </Segment>\n      <Segment \n        text={text.infantSchool}\n        header={text.headers[4]}\n        images={text.images.infantSchool}\n        href=\"/infantSchoolApp\"\n      >\n      </Segment>\n      <Segment \n        text={text.designs}\n        header={text.headers[5]}\n        designImages={text.images.design}\n        href=\"/design\"\n      >\n      </Segment>\n      <Segment \n        text={text.thanks}\n        header={text.headers[6]}\n\n      >\n      </Segment>\n    </div>\n  );\n}\n\nexport default App;\n\n/* Finish the resume to get the dates right and add the new project */\n/* Just make an about me section and use text from your cover letter */\n/* Include a git hub page and a link to the resume */\n/* Make the segments and have them take text as inputs in the form of paragraphs 1 2 3 4*/\n/* I can use text from the cover letter and the app descriptions */\n/* They should also take pics which should be easily displayed as thumbnails */\n/* Don't forget screen shots from the back end*/\n/* Include app store links */\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}